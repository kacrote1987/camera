import cn.afterturn.easypoi.word.WordExportUtil;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.springframework.util.Assert;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.net.URLEncoder;
import java.util.Map;

public class ExportWord {
    /**
     * 导出word
     *
     第一步生成替换后的word文件，只支持docx
     *
     第二步下载生成的文件
     *
     第三步删除生成的临时文件
     * @param templatePath word模板地址
     * @param temDir 生成临时文件存放地址
     * @param fileName 文件名
     * @param params 替换的参数
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     */
    public static void exportWord(String templatePath, String temDir, String fileName, Map params, HttpServletRequest request, HttpServletResponse response){
        Assert.notNull(templatePath,"模板路径不能为空");
        Assert.notNull(temDir,"临时文件路径不能为空");
        Assert.notNull(temDir,"导出文件名不能为空");
        Assert.isTrue(fileName.endsWith(".docx"),"word导出请使用docx格式");
        FileOutputStream fos = null;
        OutputStream out = null;
        if (!temDir.endsWith("/")){
            temDir = temDir+ File.separator;
        }
        File dir = new File(temDir);
        if (!dir.exists()){
            dir.mkdirs();
        }
        try {
            String userAgent = request.getHeader("user-agent").toLowerCase();
            if (userAgent.contains("msie")||userAgent.contains("like gecko")){
                fileName = URLEncoder.encode(fileName,"UTF-8");
            }else {
                fileName = new String(fileName.getBytes("utf-8"),"ISO-8859-1");
            }
            XWPFDocument doc = WordExportUtil.exportWord07(templatePath, params);
            String tmpPath = temDir + fileName;
            fos = new FileOutputStream(tmpPath);
            doc.write(fos);
            //设置强制下载不打开
            response.setContentType("application/force-download");
            //设置文件名
            response.addHeader("Content-Disposition","attachment;fileName=" + fileName);
            out = response.getOutputStream();
            doc.write(out);
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try {
                out.close();
                fos.close();
                delFileWord(temDir,fileName);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
    /**
     * 删除临时生成的文件
     */
    public static void delFileWord(String filePath,String fileName){
        File file = new File(filePath + fileName);
        File file1 = new File(filePath);
        file.delete();
        file1.delete();
    }
    /**
     * 导出wps
     *
     第一步生成替换后的word文件，只支持docx
     *
     第二步将临时word文件内容复制到下载生成的wps文件中
     *
     第三步删除生成的临时文件
     * @param templatePath word模板地址
     * @param temDir 生成临时文件存放地址
     * @param fileName 文件名
     * @param params 替换的参数
     * @param request HttpServletRequest
     * @param response HttpServletResponse
     */
    public static void exportWps(String templatePath, String temDir,String fileName,Map params, HttpServletRequest request, HttpServletResponse response){
        FileOutputStream fos = null;
        InputStream input = null;
        BufferedInputStream bins=null;
        OutputStream outs = null;
        BufferedOutputStream bouts = null;
        if (!temDir.endsWith("/")){
            temDir = temDir+ File.separator;
        }
        File dir = new File(temDir);
        if (!dir.exists()){
            dir.mkdirs();
        }
        try {
            String userAgent = request.getHeader("user-agent").toLowerCase();
            if (userAgent.contains("msie")||userAgent.contains("like gecko")){
                fileName = URLEncoder.encode(fileName,"UTF-8");
            }else {
                fileName = new String(fileName.getBytes("utf-8"),"ISO-8859-1");
            }
            XWPFDocument doc = WordExportUtil.exportWord07(templatePath, params);
            String tmpPath = temDir + fileName;
            fos= new FileOutputStream(tmpPath);
            doc.write(fos);
            input = new FileInputStream(tmpPath);
            bins = new BufferedInputStream(input);
            outs = response.getOutputStream();
            bouts = new BufferedOutputStream(outs);
            response.setContentType("application/x-download");
            response.setHeader("Content-Disposition","attachment;fileName=" + fileName);
            int bytesRead=0;
            byte[] buffer = new byte[8192];
            while((bytesRead = bins.read(buffer,0,8192))!=-1){
                bouts.write(buffer,0,bytesRead);
            }
            bouts.flush();
        }catch (Exception e){
            e.printStackTrace();
        }finally {
            try{
                bouts.close();
                outs.close();
                bins.close();
                input.close();
                fos.close();
                delFileWord(temDir,fileName);
            }catch (Exception e){
                e.printStackTrace();
            }
        }
    }
}